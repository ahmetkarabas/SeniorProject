import java.io.IOException;

import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map.Entry;
import java.util.Random;
import java.util.StringTokenizer;
import java.util.logging.Logger;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;

/*import libsvm.svm;
import libsvm.svm_model;
import libsvm.svm_node;
import libsvm.svm_parameter;*/

import java.lang.Object;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import twitter4j.conf.*;
import zemberek.morphology.apps.TurkishMorphParser;
import zemberek.morphology.parser.MorphParse;
import twitter4j.HashtagEntity;
import twitter4j.Query;
import twitter4j.QueryResult;
import twitter4j.Status;
import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;
import twitter4j.UserMentionEntity;
import twitter4j.auth.AccessToken;
import twitter4j.auth.RequestToken;

import weka.core.Instance;
import weka.core.Instances;
import weka.core.Utils;
import weka.experiment.InstanceQuery;
import weka.filters.*;
import weka.filters.supervised.attribute.Discretize;
import weka.filters.unsupervised.attribute.StringToWordVector;
import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.evaluation.NominalPrediction;
import weka.classifiers.functions.LibSVM;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.PART;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.Drawable;
import weka.core.FastVector;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;


public class TwitterApplication implements Serializable {

	private final Logger logger = Logger.getLogger(TwitterApplication.class.getName());
	private String CONSUMER_KEY="xxx";
	private String CONSUMER_SECRET="xxx";
	//Database d = new Database();
	//private String MYSQL_DRIVER = "com.mysql.jdbc.Driver";
	//String databaseURL = "jdbc:mysql://localhost:3306/Twitter";
	
	Connection con = null;
	Statement st = null;
	BufferedWriter bufferedWriter=null;
	static double percent1;//28 aralik 3 ocak
	static double percent2;//4 ocak 10 ocak
	static double percent3;// 6 ocak
	static double percent4;// 8 ocak
	
	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		
		//Arayüz olusturuluyor
		TwitterApplication t = new TwitterApplication();
		
		//String newt = t.cleanupString("Galatasaray şampİYOOONNN!!!!??!'^^^!^^^'  evet oyle oaıdsjad A!OASDA"); // metodu test icin 
		//System.out.println(newt);
		
		JFrame frame = new JFrame();
		frame.setBounds(100, 100, 491, 328);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setTitle("Twitter Application");
		frame.getContentPane().setLayout(null);
		
		frame.setVisible(true);
		
		
		String [] classifiers = new String[] {"Naive Bayes","K Nearest Neighbor","C 4.5 Decision Tree"};
		String [] programs = new String[]{"Diriliş Ertuğrul","Güldür Güldür Show","Kara Sevda","Poyraz Karayel",
				 "Seksenler","Eşkıya Dünyaya Hükümdar Olmaz","Arka Sokaklar","Kırgın Çiçekler"};
		String [] weeks = new String[]{"28 Aralık-3 Ocak","4 Ocak-10 Ocak","6 Ocak","8 Ocak"};
		String [] channels = new String[]{"Tüm Kanallar","TRT 1","Kanal D","ATV"};
		
		JComboBox<String> comboBox = new JComboBox<String>(classifiers);
		JComboBox<String> comboBox1 = new JComboBox<String>(programs);
		JComboBox<String> comboBox2 = new JComboBox<String>(weeks);
		JComboBox<String> comboBox3 = new JComboBox<String>(channels);

 		
		//comboBox.getSelectedItem();
		comboBox.setBounds(10, 60, 180, 120);
		comboBox1.setBounds(200, 60, 220, 120);
		comboBox2.setBounds(600,50,120,50);
		comboBox3.setBounds(460, 50, 120, 50);
		
		
		JLabel label1 = new JLabel("TV Programları");
		
		JLabel label = new JLabel("Sınıflandırma Metodları");
		label1.setBounds(246, 20, 120, 20);
		
		JLabel label2 = new JLabel("Kaç Cross Validation?");
		label2.setBounds(10, 200, 130, 20);
		
		JLabel label3 = new JLabel("Aralığı Seçiniz");
		label3.setBounds(620,20,120,20);
		
		JTextField textCV = new JTextField(5);
		textCV.setBounds(140, 200, 120, 20);
		
		JLabel label4 = new JLabel("Kaç En Yakın Komşu(KNN için)");
		label4.setBounds(280,200,200,20);
		
		JTextField textKNN = new JTextField(5);
		textKNN.setBounds(470,200,120,20);
		
		JButton button = new JButton("Tweetleri Getir");
		button.setBounds(350, 227, 150, 30);
		
		JButton buttonClassify = new JButton("Tweetleri Sınıflandır");
		buttonClassify.setBounds(350, 260 , 150, 30);
		
		JButton buttonPieChart = new JButton("Pie Chart'ta Göster");	
		buttonPieChart.setBounds(460, 120, 260, 40);
		
		JLabel label5 = new JLabel("Kanal Seçiniz");
		label5.setBounds(480,20,120,20);
		//JButton buttonBarChart = new JButton("Bar Chart'ta Göster");
		//buttonBarChart.setBounds(650,120,180,40);
		
		frame.getContentPane().add(label);
		frame.getContentPane().add(label1);
		frame.getContentPane().add(button);
		frame.getContentPane().add(comboBox);
		frame.getContentPane().add(comboBox1);
		frame.getContentPane().add(comboBox2);
		frame.getContentPane().add(buttonClassify);
		frame.getContentPane().add(label2);
		frame.getContentPane().add(textCV);
		frame.getContentPane().add(buttonPieChart);
		frame.getContentPane().add(label3);
		frame.getContentPane().add(label4);
		frame.getContentPane().add(textKNN);
		frame.getContentPane().add(label5);
		frame.getContentPane().add(comboBox3);
		//frame.getContentPane().add(buttonBarChart);
		label.setBounds(50, 20, 98, 31);
		frame.getContentPane().add(label);
		label.setBounds(50, 20, 140, 20);
		
		JTextField textDate1 = new JTextField(20);
		textDate1.setBounds(115, 227, 86, 20);
		frame.getContentPane().add(textDate1);
		textDate1.setColumns(10);
		
		JButton buttonDate1 = new JButton("Tarih Seçiniz");
		buttonDate1.setBounds(223, 227, 120, 23);
		frame.getContentPane().add(buttonDate1);
		buttonDate1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				textDate1.setText(new DatePicker(frame).setPickedDate());
			}
		});
		
		
		JLabel labelDate1 = new JLabel("Başlangıç Tarihi");
		labelDate1.setBounds(10, 227, 95, 14);
		frame.getContentPane().add(labelDate1);
		
		JLabel labelDate2 = new JLabel("Bitiş Tarihi");
		labelDate2.setBounds(10, 264, 86, 14);
		frame.getContentPane().add(labelDate2);
		
		JTextField textDate2 = new JTextField();
		textDate2.setBounds(115, 261, 86, 20);
		frame.getContentPane().add(textDate2);
		textDate2.setColumns(10);
		
		JButton buttonDate2 = new JButton("Tarih Seçiniz");
		buttonDate2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				
				textDate2.setText(new DatePicker(frame).setPickedDate());
			}
		});
		buttonDate2.setBounds(223, 261, 120, 23);
		frame.getContentPane().add(buttonDate2);
		
		button.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				//JOptionPane.showMessageDialog(frame, "thank you for using java");
				try {
					System.out.println(textDate1.getText() + textDate2.getText());
					new TwitterApplication().retrieve(textDate1.getText(),textDate2.getText(),comboBox1.getSelectedItem().toString());
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
			}
		});
		//Piecharttaki veri seti icin
		HashMap<String,Double> ar1 = new HashMap<String,Double>();//28 aralik 3 ocak
		HashMap<String,Double> ar2 = new HashMap<String,Double>();//4 ocak 10 ocak 
		HashMap<String,Double> ar3 = new HashMap<String,Double>();//6 ocak 
		HashMap<String,Double> ar4 = new HashMap<String,Double>();//8 ocak
		HashMap<String,Double> ar5 = new HashMap<String,Double>();//28 aralik 3 ocak trt1
		HashMap<String,Double> ar6 = new HashMap<String,Double>();//28 aralik 3 ocak kanal d
		HashMap<String,Double> ar7 = new HashMap<String,Double>();//28 aralik 3 ocak atv
		HashMap<String,Double> ar8 = new HashMap<String,Double>();//4 ocak 10 ocak trt1
		HashMap<String,Double> ar9 = new HashMap<String,Double>();//4 ocak 10 ocak kanal d
		HashMap<String,Double> ar10 = new HashMap<String,Double>();//4 ocak 10 ocak atv
		
		buttonClassify.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0){
				if(comboBox.getSelectedIndex()==0 && comboBox1.getSelectedIndex()==0)//Naive Bayes ve diriliş
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){	
					try{
					BufferedReader datafile = readDataFile("newdosya.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
					Instances data = new Instances(datafile);
					data.setClassIndex(data.numAttributes() - 1); 
					percent1 = ApplyNaiveBayes(data,Integer.parseInt(textCV.getText()));
					if(comboBox3.getSelectedIndex()==0){//bütün kanallar
					ar1.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					else if(comboBox3.getSelectedIndex()==1){//trt1
					ar5.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					}
					catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("dirilis4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2 = ApplyNaiveBayes(data,Integer.parseInt(textCV.getText()));
							if(comboBox3.getSelectedIndex()==0){//bütün kanallar
							    ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							else if(comboBox3.getSelectedIndex()==1){//trt1
								ar8.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
							}							
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					else if(textDate1.getText().equals("2016-01-06") && textDate2.getText().equals("2016-01-06")){
						try{
							BufferedReader datafile = readDataFile("dirilis6ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent3 = ApplyNaiveBayes(data,Integer.parseInt(textCV.getText()));
							ar3.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent3*data.numInstances());
							
						}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					
				}
				
				if(comboBox.getSelectedIndex()==1 && comboBox1.getSelectedIndex()==0)//K Nearest Neighbor ve diriliş
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
						try{
						BufferedReader datafile = readDataFile("newdosya.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
						Instances data = new Instances(datafile);
						data.setClassIndex(data.numAttributes() - 1); 
						percent1 = ApplyKNN(data,Integer.parseInt(textCV.getText()),Integer.parseInt(textKNN.getText()));
						if(comboBox3.getSelectedIndex()==0){//bütün kanallar
							ar1.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
						}
						else if(comboBox3.getSelectedIndex()==1){//trt1
							ar5.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
						}
						}
						catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("dirilis4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2 = ApplyKNN(data,Integer.parseInt(textCV.getText()),Integer.parseInt(textKNN.getText()));
							if(comboBox3.getSelectedIndex()==0){//bütün kanallar
							    ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							else if(comboBox3.getSelectedIndex()==1){//trt1
								ar8.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
							}
							}
							catch (Exception e) {
								// TODO Auto-generated catch block									
								e.printStackTrace();
								}
						}
					else if(textDate1.getText().equals("2016-01-06") && textDate2.getText().equals("2016-01-06")){
						try{
							BufferedReader datafile = readDataFile("dirilis6ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent3 = ApplyKNN(data,Integer.parseInt(textCV.getText()),Integer.parseInt(textKNN.getText()));
							ar3.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent3*data.numInstances());
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					
					
					
				}
				if(comboBox.getSelectedIndex()==2 && comboBox1.getSelectedIndex()==0)//C4.5 ve diriliş
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
						try{
						BufferedReader datafile = readDataFile("newdosya.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
						Instances data = new Instances(datafile);
						data.setClassIndex(data.numAttributes() - 1); 
						percent1=ApplyJ48(data,Integer.parseInt(textCV.getText()));
						if(comboBox3.getSelectedIndex()==0){//bütün kanallar
							ar1.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
						}
						else if(comboBox3.getSelectedIndex()==1){//trt1
							ar5.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
						}
						}
						catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("dirilis4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2=ApplyJ48(data,Integer.parseInt(textCV.getText()));
							if(comboBox3.getSelectedIndex()==0){//bütün kanallar
							    ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							else if(comboBox3.getSelectedIndex()==1){//trt1
								ar8.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
							}
							}
						catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					else if(textDate1.getText().equals("2016-01-06") && textDate2.getText().equals("2016-01-06")){
						try{
							BufferedReader datafile = readDataFile("dirilis6ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent3 = ApplyJ48(data,Integer.parseInt(textCV.getText()));
							ar3.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent3*data.numInstances());
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}	
					
					
				}	
				
								
				if(comboBox.getSelectedIndex()==0 && comboBox1.getSelectedIndex()==1)//Naive Bayes ve Güldür güldür
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
					try{
					BufferedReader datafile = readDataFile("guldur28aralik3ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
					Instances data = new Instances(datafile);
					data.setClassIndex(data.numAttributes() - 1); 
					percent1=ApplyNaiveBayes(data,Integer.parseInt(textCV.getText()));
					ar1.put(comboBox1.getSelectedItem().toString() +"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("guldur4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2=ApplyNaiveBayes(data,Integer.parseInt(textCV.getText()));
							ar2.put(comboBox1.getSelectedItem().toString() +"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					else if(textDate1.getText().equals("2016-01-08") && textDate2.getText().equals("2016-01-08")){
						try{
							BufferedReader datafile = readDataFile("guldur8ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent4 = ApplyNaiveBayes(data,Integer.parseInt(textCV.getText()));
							ar4.put(comboBox1.getSelectedItem().toString() +"(" + data.numInstances() + " tweet)", percent4*data.numInstances());
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					
				}
				
				if(comboBox.getSelectedIndex()==1 && comboBox1.getSelectedIndex()==1)//KNN ve Güldür Güldür
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
					try{
					BufferedReader datafile = readDataFile("guldur28aralik3ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
					Instances data = new Instances(datafile);
					data.setClassIndex(data.numAttributes() - 1); 
					percent1=ApplyKNN(data,Integer.parseInt(textCV.getText()),Integer.parseInt(textKNN.getText()));
					ar1.put(comboBox1.getSelectedItem().toString() +"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("guldur4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2=ApplyKNN(data,Integer.parseInt(textCV.getText()),Integer.parseInt(textKNN.getText()));
							ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					else if(textDate1.getText().equals("2016-01-08") && textDate2.getText().equals("2016-01-08")){
						try{
							BufferedReader datafile = readDataFile("guldur8ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent4 = ApplyKNN(data,Integer.parseInt(textCV.getText()),Integer.parseInt(textKNN.getText()));
							ar4.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent4*data.numInstances());
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					
					
				}
				
				if(comboBox.getSelectedIndex()==2 && comboBox1.getSelectedIndex()==1)//C4.5 ve Güldür güldür
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
					try{
					BufferedReader datafile = readDataFile("guldur28aralik3ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
					Instances data = new Instances(datafile);
					data.setClassIndex(data.numAttributes() - 1); 
					percent1=ApplyJ48(data,Integer.parseInt(textCV.getText()));
					ar1.put(comboBox1.getSelectedItem().toString() +"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("guldur4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2=ApplyJ48(data,Integer.parseInt(textCV.getText()));
							ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}	
					else if(textDate1.getText().equals("2016-01-08") && textDate2.getText().equals("2016-01-08")){
						try{
							BufferedReader datafile = readDataFile("guldur8ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent4 = ApplyJ48(data,Integer.parseInt(textCV.getText()));
							ar4.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent4*data.numInstances());
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					
				
				}
				
				
				
				if(comboBox.getSelectedIndex()==0 && comboBox1.getSelectedIndex()==2)//Naive Bayes ve Kara Sevda
				{
					System.out.println(textDate1.getText());
					System.out.println(textDate2.getText());
					
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
					System.out.println("Naive Bayes ve Kara Sevda seçildi");	
					try{
					BufferedReader datafile = readDataFile("karasevda28aralik3ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
					Instances data = new Instances(datafile);
					data.setClassIndex(data.numAttributes() - 1); 
					percent1=ApplyNaiveBayes(data,Integer.parseInt(textCV.getText()));
					ar1.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("karasevda4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2=ApplyNaiveBayes(data,Integer.parseInt(textCV.getText()));
							ar2.put(comboBox1.getSelectedItem().toString() +"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					else if(textDate1.getText().equals("2016-01-06") && textDate2.getText().equals("2016-01-06")){
						try{
							BufferedReader datafile = readDataFile("karasevda6ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent3 = ApplyNaiveBayes(data,Integer.parseInt(textCV.getText()));
							ar3.put(comboBox1.getSelectedItem().toString() +"(" + data.numInstances() + " tweet)", percent3*data.numInstances());
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}					
					
				}
				if(comboBox.getSelectedIndex()==1 && comboBox1.getSelectedIndex()==2)//KNN ve Kara Sevda
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
					try{
					BufferedReader datafile = readDataFile("karasevda28aralik3ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
					Instances data = new Instances(datafile);
					data.setClassIndex(data.numAttributes() - 1); 
					percent1=ApplyKNN(data,Integer.parseInt(textCV.getText()),Integer.parseInt(textKNN.getText()));
					ar1.put(comboBox1.getSelectedItem().toString() +"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					}
					
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("karasevda4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2=ApplyKNN(data,Integer.parseInt(textCV.getText()),Integer.parseInt(textKNN.getText()));
							ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());	
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					else if(textDate1.getText().equals("2016-01-06") && textDate2.getText().equals("2016-01-06")){
						try{
							BufferedReader datafile = readDataFile("karasevda6ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent3 = ApplyKNN(data,Integer.parseInt(textCV.getText()),Integer.parseInt(textKNN.getText()));
							ar3.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent3*data.numInstances());
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					
				}
				if(comboBox.getSelectedIndex()==2 && comboBox1.getSelectedIndex()==2)//J48 ve Kara Sevda
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
					try{
					BufferedReader datafile = readDataFile("karasevda28aralik3ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
					Instances data = new Instances(datafile);
					data.setClassIndex(data.numAttributes() - 1); 
					percent1=ApplyJ48(data,Integer.parseInt(textCV.getText()));
					ar1.put(comboBox1.getSelectedItem().toString() +"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("karasevda4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2=ApplyJ48(data,Integer.parseInt(textCV.getText()));
							ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					else if(textDate1.getText().equals("2016-01-06") && textDate2.getText().equals("2016-01-06")){
						try{
							BufferedReader datafile = readDataFile("karasevda6ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent3 = ApplyJ48(data,Integer.parseInt(textCV.getText()));
							ar3.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent3*data.numInstances());
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					
					
				}
				
				
				if(comboBox.getSelectedIndex()==0 && comboBox1.getSelectedIndex()==3)//Naive Bayes ve Poyraz Karayel
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
					try{
					BufferedReader datafile = readDataFile("poyrazkarayel28aralik3ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
					Instances data = new Instances(datafile);
					data.setClassIndex(data.numAttributes() - 1); 
					percent1=ApplyNaiveBayes(data,Integer.parseInt(textCV.getText()));
					if(comboBox3.getSelectedIndex()==0){//bütün kanallar
						ar1.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					else if(comboBox3.getSelectedIndex()==2){//kanal d 
						ar6.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					}
					catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("poyrazkarayel4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2=ApplyNaiveBayes(data,Integer.parseInt(textCV.getText()));
							if(comboBox3.getSelectedIndex()==0){//bütün kanallar
							    ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							else if(comboBox3.getSelectedIndex()==2){//kanal d 
								ar9.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
							}
						    }
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					else if(textDate1.getText().equals("2016-01-06") && textDate2.getText().equals("2016-01-06")){
						try{
							BufferedReader datafile = readDataFile("poyrazkarayel6ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent3 = ApplyNaiveBayes(data,Integer.parseInt(textCV.getText()));
							ar3.put(comboBox1.getSelectedItem().toString() +"(" + data.numInstances() + " tweet)" , percent3*data.numInstances());
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					
				}	
				
				if(comboBox.getSelectedIndex()==1 && comboBox1.getSelectedIndex()==3)//KNN ve Poyraz Karayel
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
					try{
					BufferedReader datafile = readDataFile("poyrazkarayel28aralik3ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
					Instances data = new Instances(datafile);
					data.setClassIndex(data.numAttributes() - 1); 
					percent1=ApplyKNN(data,Integer.parseInt(textCV.getText()),Integer.parseInt(textKNN.getText()));
					if(comboBox3.getSelectedIndex()==0){//bütün kanallar
						ar1.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					else if(comboBox3.getSelectedIndex()==2){//kanal d 
						ar6.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					}
					catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("poyrazkarayel4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2=ApplyKNN(data,Integer.parseInt(textCV.getText()),Integer.parseInt(textKNN.getText()));
							if(comboBox3.getSelectedIndex()==0){//bütün kanallar
							    ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							else if(comboBox3.getSelectedIndex()==2){//kanal d 
								ar9.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
							}
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					else if(textDate1.getText().equals("2016-01-06") && textDate2.getText().equals("2016-01-06")){
						try{
							BufferedReader datafile = readDataFile("poyrazkarayel6ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent3 = ApplyKNN(data,Integer.parseInt(textCV.getText()),Integer.parseInt(textKNN.getText()));
							ar3.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent3*data.numInstances());
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
				}
				
				if(comboBox.getSelectedIndex()==2 && comboBox1.getSelectedIndex()==3)//C4.5 ve Poyraz Karayel
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
					try{
					BufferedReader datafile = readDataFile("poyrazkarayel28aralik3ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
					Instances data = new Instances(datafile);
					data.setClassIndex(data.numAttributes() - 1); 
					percent1=ApplyJ48(data,Integer.parseInt(textCV.getText()));
					if(comboBox3.getSelectedIndex()==0){//bütün kanallar
						ar1.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					else if(comboBox3.getSelectedIndex()==2){//kanal d 
						ar6.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					}
					catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("poyrazkarayel4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2=ApplyJ48(data,Integer.parseInt(textCV.getText()));
							if(comboBox3.getSelectedIndex()==0){//bütün kanallar
							    ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							else if(comboBox3.getSelectedIndex()==2){//kanal d 
								ar9.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
							}
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					else if(textDate1.getText().equals("2016-01-06") && textDate2.getText().equals("2016-01-06")){
						try{
							BufferedReader datafile = readDataFile("poyrazkarayel6ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent3 = ApplyJ48(data,Integer.parseInt(textCV.getText()));
							ar3.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent3*data.numInstances());
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					
				}
				
				if(comboBox.getSelectedIndex()==0 && comboBox1.getSelectedIndex()==4)//Naive Bayes ve Seksenler
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
						try{
							BufferedReader datafile = readDataFile("seksenler28aralik3ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent1=ApplyNaiveBayes(data,Integer.parseInt(textCV.getText()));
							if(comboBox3.getSelectedIndex()==0){//bütün kanallar
								ar1.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
							}
							else if(comboBox3.getSelectedIndex()==1){//trt1
								ar5.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
							}
						}
						catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("seksenler4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2=ApplyNaiveBayes(data,Integer.parseInt(textCV.getText()));
							if(comboBox3.getSelectedIndex()==0){//bütün kanallar
							    ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							else if(comboBox3.getSelectedIndex()==1){//trt1
								ar8.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
							}
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					
					
					
				}	
				
				if(comboBox.getSelectedIndex()==1 && comboBox1.getSelectedIndex()==4)//KNN ve Seksenler
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
						try{
							BufferedReader datafile = readDataFile("seksenler28aralik3ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent1=ApplyKNN(data,Integer.parseInt(textCV.getText()),Integer.parseInt(textKNN.getText()));
							if(comboBox3.getSelectedIndex()==0){//bütün kanallar
								ar1.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
							}
							else if(comboBox3.getSelectedIndex()==1){//trt1
								ar5.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
							}
						}
						catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("seksenler4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2=ApplyKNN(data,Integer.parseInt(textCV.getText()),Integer.parseInt(textKNN.getText()));
							if(comboBox3.getSelectedIndex()==0){//bütün kanallar
							    ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							else if(comboBox3.getSelectedIndex()==1){//trt1
								ar8.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
							}
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
				}
				
				if(comboBox.getSelectedIndex()==2 && comboBox1.getSelectedIndex()==4)//C4.5 ve Seksenler
				{	
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
					try{
						BufferedReader datafile = readDataFile("seksenler28aralik3ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
						Instances data = new Instances(datafile);
						data.setClassIndex(data.numAttributes() - 1); 
						percent1=ApplyJ48(data,Integer.parseInt(textCV.getText()));
						if(comboBox3.getSelectedIndex()==0){//bütün kanallar
							ar1.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
						}
						else if(comboBox3.getSelectedIndex()==1){//trt1
							ar5.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
						}
					}
					catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
					try{
						BufferedReader datafile = readDataFile("seksenler4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
						Instances data = new Instances(datafile);
						data.setClassIndex(data.numAttributes() - 1); 
						percent2=ApplyJ48(data,Integer.parseInt(textCV.getText()));
						if(comboBox3.getSelectedIndex()==0){//bütün kanallar
						    ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
						}
						else if(comboBox3.getSelectedIndex()==1){//trt1
							ar8.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
						}
						}
						catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
				}
					
				}
				
				if(comboBox.getSelectedIndex()==0 && comboBox1.getSelectedIndex()==5)//Naive Bayes ve Eşkıya
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
					try{
					BufferedReader datafile = readDataFile("eskiyadunya28aralik3ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
					Instances data = new Instances(datafile);
					data.setClassIndex(data.numAttributes() - 1); 
					percent1=ApplyNaiveBayes(data,Integer.parseInt(textCV.getText()));
					if(comboBox3.getSelectedIndex()==0){//bütün kanallar
						ar1.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					else if(comboBox3.getSelectedIndex()==3){//atv 
						ar7.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					}
					catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("eskiyadunya4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2=ApplyNaiveBayes(data,Integer.parseInt(textCV.getText()));
							if(comboBox3.getSelectedIndex()==0){//bütün kanallar
							    ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							else if(comboBox3.getSelectedIndex()==3){//atv
								ar10.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
							}
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
				}	
				
				if(comboBox.getSelectedIndex()==1 && comboBox1.getSelectedIndex()==5)//KNN ve Eşkıya
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
					try{
					BufferedReader datafile = readDataFile("eskiyadunya28aralik3ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
					Instances data = new Instances(datafile);
					data.setClassIndex(data.numAttributes() - 1); 
					percent1=ApplyKNN(data,Integer.parseInt(textCV.getText()),Integer.parseInt(textKNN.getText()));
					if(comboBox3.getSelectedIndex()==0){//bütün kanallar
						ar1.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					else if(comboBox3.getSelectedIndex()==3){//atv 
						ar7.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					}
					catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("eskiyadunya4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2=ApplyKNN(data,Integer.parseInt(textCV.getText()),Integer.parseInt(textKNN.getText()));
							if(comboBox3.getSelectedIndex()==0){//bütün kanallar
							    ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							else if(comboBox3.getSelectedIndex()==3){//atv
								ar10.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
							}
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
				}
				
				if(comboBox.getSelectedIndex()==2 && comboBox1.getSelectedIndex()==5)//C4.5 ve Eşkıya
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
					try{
					BufferedReader datafile = readDataFile("eskiyadunya28aralik3ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
					Instances data = new Instances(datafile);
					data.setClassIndex(data.numAttributes() - 1); 
					percent1=ApplyJ48(data,Integer.parseInt(textCV.getText()));
					if(comboBox3.getSelectedIndex()==0){//bütün kanallar
						ar1.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					else if(comboBox3.getSelectedIndex()==3){//atv 
						ar7.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					}
					catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("eskiyadunya4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2=ApplyJ48(data,Integer.parseInt(textCV.getText()));
							if(comboBox3.getSelectedIndex()==0){//bütün kanallar
							    ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							else if(comboBox3.getSelectedIndex()==3){//atv
								ar10.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
							}
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
				}
				
				if(comboBox.getSelectedIndex()==0 && comboBox1.getSelectedIndex()==6)//Naive Bayes ve Arka Sokaklar
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
					try{
					BufferedReader datafile = readDataFile("arkasokaklar28aralik3ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
					Instances data = new Instances(datafile);
					data.setClassIndex(data.numAttributes() - 1); 
					percent1=ApplyNaiveBayes(data,Integer.parseInt(textCV.getText()));
					if(comboBox3.getSelectedIndex()==0){//bütün kanallar
						ar1.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					else if(comboBox3.getSelectedIndex()==2){//kanal d 
						ar6.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					}
					catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("arkasokaklar4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2=ApplyNaiveBayes(data,Integer.parseInt(textCV.getText()));
							if(comboBox3.getSelectedIndex()==0){//bütün kanallar
							    ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							else if(comboBox3.getSelectedIndex()==2){//kanal d 
								ar9.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
							}
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					else if(textDate1.getText().equals("2016-01-08") && textDate2.getText().equals("2016-01-08")){
						try{
							BufferedReader datafile = readDataFile("arkasokaklar8ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent4 = ApplyNaiveBayes(data,Integer.parseInt(textCV.getText()));
							ar4.put(comboBox1.getSelectedItem().toString() +"(" + data.numInstances() + " tweet)" , percent4*data.numInstances());
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
				}	
				
				if(comboBox.getSelectedIndex()==1 && comboBox1.getSelectedIndex()==6)//KNN ve Arka Sokaklar
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
					try{
					BufferedReader datafile = readDataFile("arkasokaklar28aralik3ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
					Instances data = new Instances(datafile);
					data.setClassIndex(data.numAttributes() - 1); 
					percent1=ApplyKNN(data,Integer.parseInt(textCV.getText()),Integer.parseInt(textKNN.getText()));
					if(comboBox3.getSelectedIndex()==0){//bütün kanallar
						ar1.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					else if(comboBox3.getSelectedIndex()==2){//kanal d 
						ar6.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					}
					catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("arkasokaklar4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2=ApplyKNN(data,Integer.parseInt(textCV.getText()),Integer.parseInt(textKNN.getText()));
							if(comboBox3.getSelectedIndex()==0){//bütün kanallar
							    ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							else if(comboBox3.getSelectedIndex()==2){//kanal d 
								ar9.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
							}
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					else if(textDate1.getText().equals("2016-01-08") && textDate2.getText().equals("2016-01-08")){
						try{
							BufferedReader datafile = readDataFile("arkasokaklar8ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent4 = ApplyKNN(data,Integer.parseInt(textCV.getText()),Integer.parseInt(textKNN.getText()));
							ar4.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent4*data.numInstances());
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
				}
				
				if(comboBox.getSelectedIndex()==2 && comboBox1.getSelectedIndex()==6)//C4.5 ve Arka sokaklar
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
					try{
					BufferedReader datafile = readDataFile("arkasokaklar28aralik3ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
					Instances data = new Instances(datafile);
					data.setClassIndex(data.numAttributes() - 1); 
					percent1=ApplyJ48(data,Integer.parseInt(textCV.getText()));
					if(comboBox3.getSelectedIndex()==0){//bütün kanallar
						ar1.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					else if(comboBox3.getSelectedIndex()==2){//kanal d 
						ar6.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					}
					catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("arkasokaklar4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2=ApplyJ48(data,Integer.parseInt(textCV.getText()));
							if(comboBox3.getSelectedIndex()==0){//bütün kanallar
							    ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							else if(comboBox3.getSelectedIndex()==2){//kanal d 
								ar9.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
							}
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
					else if(textDate1.getText().equals("2016-01-08") && textDate2.getText().equals("2016-01-08")){
						try{
							BufferedReader datafile = readDataFile("arkasokaklar8ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent4 = ApplyJ48(data,Integer.parseInt(textCV.getText()));
							ar4.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent4*data.numInstances());
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
				}
				
				if(comboBox.getSelectedIndex()==0 && comboBox1.getSelectedIndex()==7)//Naive Bayes ve Kırgın cicekler
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
					try{
					BufferedReader datafile = readDataFile("kirgincicekler28aralik3ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
					Instances data = new Instances(datafile);
					data.setClassIndex(data.numAttributes() - 1); 
					percent1=ApplyNaiveBayes(data,Integer.parseInt(textCV.getText()));
					if(comboBox3.getSelectedIndex()==0){//bütün kanallar
						ar1.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					else if(comboBox3.getSelectedIndex()==3){//atv 
						ar7.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					}
					catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("kirgincicekler4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2=ApplyNaiveBayes(data,Integer.parseInt(textCV.getText()));
							if(comboBox3.getSelectedIndex()==0){//bütün kanallar
							    ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							else if(comboBox3.getSelectedIndex()==3){//atv
								ar10.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
							}
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
				}	
				
				if(comboBox.getSelectedIndex()==1 && comboBox1.getSelectedIndex()==7)//KNN ve Kirgin cicekler
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
					try{
					BufferedReader datafile = readDataFile("kirgincicekler28aralik3ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
					Instances data = new Instances(datafile);
					data.setClassIndex(data.numAttributes() - 1); 
					percent1=ApplyKNN(data,Integer.parseInt(textCV.getText()),Integer.parseInt(textKNN.getText()));
					if(comboBox3.getSelectedIndex()==0){//bütün kanallar
						ar1.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					else if(comboBox3.getSelectedIndex()==3){//atv 
						ar7.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					}
					catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("kirgincicekler4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2=ApplyKNN(data,Integer.parseInt(textCV.getText()),Integer.parseInt(textKNN.getText()));
							if(comboBox3.getSelectedIndex()==0){//bütün kanallar
							    ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							else if(comboBox3.getSelectedIndex()==3){//atv
								ar10.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
							}
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
				}
				
				if(comboBox.getSelectedIndex()==2 && comboBox1.getSelectedIndex()==7)//C4.5 ve Kirgin cicekler
				{
					if(textDate1.getText().equals("2015-12-28") && textDate2.getText().equals("2016-01-03")){
					try{
					BufferedReader datafile = readDataFile("kirgincicekler28aralik3ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
					Instances data = new Instances(datafile);
					data.setClassIndex(data.numAttributes() - 1); 
					percent1=ApplyJ48(data,Integer.parseInt(textCV.getText()));
					if(comboBox3.getSelectedIndex()==0){//bütün kanallar
						ar1.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					else if(comboBox3.getSelectedIndex()==3){//atv 
						ar7.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
					}
					}
					catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					}
					else if(textDate1.getText().equals("2016-01-04") && textDate2.getText().equals("2016-01-10")){
						try{
							BufferedReader datafile = readDataFile("kirgincicekler4ocak10ocak.txt"); //comboBox1.getSelectedItem().toString().concat(".txt")
							Instances data = new Instances(datafile);
							data.setClassIndex(data.numAttributes() - 1); 
							percent2=ApplyJ48(data,Integer.parseInt(textCV.getText()));
							if(comboBox3.getSelectedIndex()==0){//bütün kanallar
							    ar2.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent2*data.numInstances());
							}
							else if(comboBox3.getSelectedIndex()==3){//atv
								ar10.put(comboBox1.getSelectedItem().toString()+"(" + data.numInstances() + " tweet)", percent1*data.numInstances());
							}
							}
							catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					}
				}								
				
			}
			
		});
		
		buttonPieChart.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				if(comboBox2.getSelectedIndex()==0 && comboBox3.getSelectedIndex()==0){ //28aralik-3ocak tüm
				PieChart pc = new PieChart("Haftalık Görünüm","Hangi dizi daha çok olumlu tweet topladı?");
				
				//new PieChart("Haftalık Görünüm","Hangi dizi daha çok olumlu tweet topladı?").createDataset(ar1);
				JFreeChart chart = pc.createChart(pc.createDataset(ar1),"28 Aralık-3 Ocak Tüm Kanallar");
				ChartPanel chartPanel = new ChartPanel(chart);
		        // default size
		        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
		        // add it to our application
		        pc.setContentPane(chartPanel);
		        
				pc.pack();
				pc.setVisible(true);
				}
				else if(comboBox2.getSelectedIndex()==1  && comboBox3.getSelectedIndex()==0){//4ocak-10ocak tüm 
					PieChart pc = new PieChart("Haftalık Görünüm","Hangi dizi daha çok olumlu tweet topladı?");
					
					//new PieChart("Haftalık Görünüm","Hangi dizi daha çok olumlu tweet topladı?").createDataset(ar1);
					JFreeChart chart = pc.createChart(pc.createDataset(ar2),"4 Ocak-10 Ocak Tüm Kanallar");
					ChartPanel chartPanel = new ChartPanel(chart);
			        // default size
			        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
			        // add it to our application
			        pc.setContentPane(chartPanel);
			        
					pc.pack();
					pc.setVisible(true);
						
				}
				else if(comboBox2.getSelectedIndex()==2  && comboBox3.getSelectedIndex()==0){//6 ocaktakiler
					PieChart pc = new PieChart("6 Ocak","Hangi dizi daha çok olumlu tweet topladı?");
					
					//new PieChart("Haftalık Görünüm","Hangi dizi daha çok olumlu tweet topladı?").createDataset(ar1);
					JFreeChart chart = pc.createChart(pc.createDataset(ar3),"6 Ocak");
					ChartPanel chartPanel = new ChartPanel(chart);
			        // default size
			        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
			        // add it to our application
			        pc.setContentPane(chartPanel);
			        
					pc.pack();
					pc.setVisible(true);
						
				}
				else if(comboBox2.getSelectedIndex()==3  && comboBox3.getSelectedIndex()==0 ){//8 ocaktakiler
					PieChart pc = new PieChart("8 Ocak","Hangi dizi daha çok olumlu tweet topladı?");
					
					//new PieChart("Haftalık Görünüm","Hangi dizi daha çok olumlu tweet topladı?").createDataset(ar1);
					JFreeChart chart = pc.createChart(pc.createDataset(ar4),"8 Ocak");
					ChartPanel chartPanel = new ChartPanel(chart);
			        // default size
			        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
			        // add it to our application
			        pc.setContentPane(chartPanel);
			        
					pc.pack();
					pc.setVisible(true);
						
				}
				else if(comboBox2.getSelectedIndex()==0  && comboBox3.getSelectedIndex()==1 ){//28 aralık 3 ocak trt1
					PieChart pc = new PieChart("28 Aralık - 3 Ocak TRT-1","Hangi dizi daha çok olumlu tweet topladı?");
					
					//new PieChart("Haftalık Görünüm","Hangi dizi daha çok olumlu tweet topladı?").createDataset(ar1);
					JFreeChart chart = pc.createChart(pc.createDataset(ar5),"28 Aralık-3 Ocak TRT-1");
					ChartPanel chartPanel = new ChartPanel(chart);
			        // default size
			        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
			        // add it to our application
			        pc.setContentPane(chartPanel);
			        
					pc.pack();
					pc.setVisible(true);
						
				}
				else if(comboBox2.getSelectedIndex()==0  && comboBox3.getSelectedIndex()==2 ){//28 aralık 3 ocak kanal d 
					PieChart pc = new PieChart("28 Aralık - 3 Ocak Kanal D","Hangi dizi daha çok olumlu tweet topladı?");
					
					//new PieChart("Haftalık Görünüm","Hangi dizi daha çok olumlu tweet topladı?").createDataset(ar1);
					JFreeChart chart = pc.createChart(pc.createDataset(ar6),"28 Aralık-3 Ocak Kanal D");
					ChartPanel chartPanel = new ChartPanel(chart);
			        // default size
			        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
			        // add it to our application
			        pc.setContentPane(chartPanel);
			        
					pc.pack();
					pc.setVisible(true);
						
				}
				else if(comboBox2.getSelectedIndex()==0  && comboBox3.getSelectedIndex()==3 ){//28 aralık 3 ocak atv
					PieChart pc = new PieChart("28 Aralık - 3 Ocak ATV","Hangi dizi daha çok olumlu tweet topladı?");
					
					//new PieChart("Haftalık Görünüm","Hangi dizi daha çok olumlu tweet topladı?").createDataset(ar1);
					JFreeChart chart = pc.createChart(pc.createDataset(ar7),"28 Aralık-3 Ocak ATV");
					ChartPanel chartPanel = new ChartPanel(chart);
			        // default size
			        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
			        // add it to our application
			        pc.setContentPane(chartPanel);
			        
					pc.pack();
					pc.setVisible(true);
						
				}
				else if(comboBox2.getSelectedIndex()==1  && comboBox3.getSelectedIndex()==1 ){//4 Ocak-10 Ocak TRT1
					PieChart pc = new PieChart("4 Ocak-10 Ocak TRT-1","Hangi dizi daha çok olumlu tweet topladı?");
					
					//new PieChart("Haftalık Görünüm","Hangi dizi daha çok olumlu tweet topladı?").createDataset(ar1);
					JFreeChart chart = pc.createChart(pc.createDataset(ar8),"4 Ocak-10 Ocak TRT-1");
					ChartPanel chartPanel = new ChartPanel(chart);
			        // default size
			        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
			        // add it to our application
			        pc.setContentPane(chartPanel);
			        
					pc.pack();
					pc.setVisible(true);
						
				}
				else if(comboBox2.getSelectedIndex()==1  && comboBox3.getSelectedIndex()==2 ){//4 Ocak-10 Ocak Kanal D
					PieChart pc = new PieChart("4 Ocak-10 Ocak Kanal D","Hangi dizi daha çok olumlu tweet topladı?");
					
					//new PieChart("Haftalık Görünüm","Hangi dizi daha çok olumlu tweet topladı?").createDataset(ar1);
					JFreeChart chart = pc.createChart(pc.createDataset(ar9),"4 Ocak-10 Ocak Kanal D");
					ChartPanel chartPanel = new ChartPanel(chart);
			        // default size
			        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
			        // add it to our application
			        pc.setContentPane(chartPanel);
			        
					pc.pack();
					pc.setVisible(true);
						
				}
				else if(comboBox2.getSelectedIndex()==1  && comboBox3.getSelectedIndex()==3 ){//4 Ocak-10 Ocak ATV
					PieChart pc = new PieChart("4 Ocak-10 Ocak ATV","Hangi dizi daha çok olumlu tweet topladı?");
					
					//new PieChart("Haftalık Görünüm","Hangi dizi daha çok olumlu tweet topladı?").createDataset(ar1);
					JFreeChart chart = pc.createChart(pc.createDataset(ar10),"4 Ocak-10 Ocak ATV");
					ChartPanel chartPanel = new ChartPanel(chart);
			        // default size
			        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
			        // add it to our application
			        pc.setContentPane(chartPanel);
			        
					pc.pack();
					pc.setVisible(true);
						
				}				
				
				
				
				
				
		}});
		
		
		
		//Tweetleri cekiyoruz
		//
		//new TwitterApplication().retrieve();
		
		 
		
	/*	TurkishMorphParser parser;
		try {
			parser = TurkishMorphParser.createWithDefaults();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		ArrayList<String> parsedList = new ArrayList<String>(); */
		//Database d = new Database();
		
	    
		//d.addTweets();	
	    //d.showTweets();
		
		//d.dropTweetTable();
		
		
		BufferedReader datafile = readDataFile("newdosya.txt");
		//BufferedReader datafile2 = readDataFile("karasevda.txt");
		//BufferedReader datafile3 = readDataFile("poyrazkarayel.txt");
		
		
		 
		Instances data = new Instances(datafile);
		data.setClassIndex(data.numAttributes() - 1); 
		
	    //ApplyNaiveBayes(data);  
	    
	    //ApplyKNN(data);
	    //ApplySVM(data);
	    
 
		StringToWordVector swv = new StringToWordVector();
        swv.setInputFormat(data);
        Instances dataFiltered = Filter.useFilter(data, swv);
        //System.out.println("Filtered data " +dataFiltered.toString());
        
        //System.out.println("\n\nFiltered data:\n\n" + dataFiltered);
      
		
	}
	
	  

	  /**
	   * Method that deletes all non-letters from a string, and lowercases it.
	   */
	 //Tweetleri temizliyor büyük harfleri,rakamlari ve noktalama işaretlerini elimimine ediyor.
	 public String cleanupString(String messageText) {
		//messageText = messageText.replaceAll("(.)\\1{1,}", "$1"); 	 //tekrarlanan karakterleri cikariyor
	    char[] result = new char[messageText.length()];
	    int position = 0;

	    for (int i = 0; i < messageText.length(); i++) {
	      if (Character.isLetter(messageText.charAt(i)) ||
	        Character.isWhitespace(messageText.charAt(i))) {
	        result[position++] = Character.toLowerCase(messageText.charAt(i));
	      }
	    }
	    return new String(result);
	  } 



	
	public void retrieve(String date1, String date2, String programName) throws IOException{
		logger.info("Retrieving tweets...");
		ConfigurationBuilder builder = new ConfigurationBuilder();
		builder.setOAuthConsumerKey(CONSUMER_KEY);
		builder.setOAuthConsumerSecret(CONSUMER_SECRET);
		Configuration configuration = builder.build();
		TwitterFactory factory = new TwitterFactory(configuration);
		Twitter twitter = factory.getInstance();
		
		ArrayList<String> tweetList = new ArrayList<String>(); //ilk query icin
		ArrayList<String> tweetList2 = new ArrayList<String>(); //ikinci query icin
		ArrayList<String> hashtagList = new ArrayList<String>();
		ArrayList<String> mentionList = new ArrayList<String>();
		
		int tweetPoint = 0;
	//	Twitter twitter = new TwitterFactory().getInstance();
		
		//String user = "Ahmet_Karabas";
		
		//Tweetleri dosyaya yazmak icin
		FileWriter out = new FileWriter("out.txt");
		String newLine = System.getProperty("line.separator");
		
		Query query = new Query(programName + " -filter:retweets -filter:links -filter:replies -filter:images -filter:mentions"); //
		//hashtagler icin de arastir
		
		Date date=new Date();
		String modifiedDate= new SimpleDateFormat(date1).format(date);  //
		String modifiedDate2= new SimpleDateFormat(date2).format(date);
        query.setSince(modifiedDate);
        query.setUntil(modifiedDate2);
        

        query.lang("tr");
		query.setCount(100);
		
		//query.setSince("2011-01-01");
		System.out.println("key:" + twitter.getConfiguration().getOAuthConsumerKey());
		System.out.println("secret: " + twitter.getConfiguration().getOAuthConsumerSecret());
		AccessToken accessToken = new AccessToken("344727895-ZgyHyzGDeZsSuZduKB8wythNfu4yJm8jYHTBdw3f", "m8Jbf2e4HwFOjHvNTiT6rOLqJlH5LQBW9V0nOHaIY7Dea");
	  //  twitter.setOAuthConsumer("OR611vX1xkmnuXLwD0tRwpy7D", "F4REstjhTx75xzwO0dFamRLayEj4gjPYYeKzWBwfsnEMZc4Uf7");
	    twitter.setOAuthAccessToken(accessToken);
		
		try {
					
		QueryResult result = twitter.search(query);
		
		System.out.println("Count : " + result.getTweets().size()) ;		
		
		//d.dropAllWords();
		
		// adding words to database
		//d.addWords();
				
		for (Status tweet : result.getTweets()) {	//her tweet icin		
			
		tweetPoint=0; // tweet puanini sifirliyoruz	
			
		for(HashtagEntity hashtag : tweet.getHashtagEntities()){
			//System.out.println(hashtag);
			hashtagList.add(hashtag.getText().toString());
		}
		
		for(UserMentionEntity mention : tweet.getUserMentionEntities()){
			mentionList.add(mention.getScreenName().toString());
		}
		
	   // System.out.println("@"+tweet.getUser().getScreenName() + " text : " + tweet.getText() + " count : " + tweet.getRetweetCount());
		
		
		
		tweetList.add(tweet.getText());	
	
	//	Database d = new Database();
		TurkishMorphParser parser = TurkishMorphParser.createWithDefaults();
		// Class.forName(MYSQL_DRIVER);
	    //  System.out.println("Class Loaded....");
	      //con = DriverManager.getConnection(databaseURL,"","");
	      System.out.println("Inserting data....");
	      //st = con.createStatement();
	      
		
		//String tweetLabel;
		
		String msg = tweet.getText();
		//String msg = parse(tweet.getText());
		//out.write(msg);   // dosyaya yazmak icindi
				
		System.out.println(cleanupString(msg)); //yeni
		//msg = cleanupString(msg);
		
		String[] input = msg.split(" ");
		out.write("\""+cleanupString(msg)+"\""+newLine);
		
		//out.write("\"");
		/*for(int j = 0;  j < input.length; j++)
		{

			List<MorphParse> parses = parser.parse(input[j]);
			for (MorphParse parse : parses) {
				System.out.println(parse.root);
				out.write(parse.root);

			} 
			out.write("\""+newLine);

			}*/
		}
		
		} 
		catch (TwitterException e) {
		
		e.printStackTrace();
		System.out.println("Failed to search tweets" + e.getMessage());
		}
		
		
		
        /*    System.out.println("Tweets:");
		for(String t :tweetList){
			System.out.println(t); 
			
			//parsedList.add(new ParseWords(parser).parse(t));
		} */
		
		HashMap<String,Integer> hashmap = new HashMap<String,Integer>();
		System.out.println("Hashtags:");
		for(String h:hashtagList){ //hashtaglarin bulunma sayisi bulunuyor
			System.out.println(h);
			if(hashmap.containsKey(h))
			{
				hashmap.put(h, hashmap.get(h)+1);
			}
			else{
			hashmap.put(h, 1);
			}
		} 
		int max=0;
		String maxHashtag="";
		for(Entry<String,Integer> entry : hashmap.entrySet())
		{	
			if(entry.getValue()>max){
				max=entry.getValue();		
				maxHashtag=entry.getKey();
			}
		}
		
		System.out.println("En cok bulunan hashtag: " + maxHashtag);
		 
		//En cok bulunan hashtag ile yeniden aratiliyor
		Query queryNew = new Query(maxHashtag + " -filter:retweets -filter:links -filter:replies -filter:images -filter:mentions - filter:hashtags");
		
		String modifiedDate3= new SimpleDateFormat(date1).format(date);
		String modifiedDate4= new SimpleDateFormat(date2).format(date);
        queryNew.setSince(modifiedDate3);
        queryNew.setUntil(modifiedDate4);
        

        queryNew.lang("tr");
		queryNew.setCount(100);
		
		try {
			
			QueryResult result2 = twitter.search(queryNew);
			
			System.out.println("Count : " + result2.getTweets().size()) ;		
			
			//d.dropAllWords();
			
			
					
			for (Status tweet : result2.getTweets()) {	//her tweet icin
							
				if(!tweetList.contains(tweet.getText())) //tweetlistte yoksa ekliyor, varsa eklemiyor
				tweetList.add(tweet.getText());			
					
				
				tweetPoint = 0;
				//String tweetLabel;
				
				String msg2 = tweet.getText();
				System.out.println(cleanupString(msg2)); // yeni
				String[] input = msg2.split(" ");
				out.write("\""+cleanupString(msg2)+"\""+newLine);
				
				for(int j = 0;  j < input.length; j++)
				{
					
				//System.out.println(input[j]);
				/*List<MorphParse> parses = parser.parse(input[j]);
				for (MorphParse parse : parses) {
				System.out.println(parse.root);
				//out.write(parse.root + newLine);
				}*/
				
				}
				
				//Calculating tweet point
			/*	if(tweetPoint>0)
				{
					tweetLabel="positive";
				}
				else if(tweetPoint<0)
				{
					tweetLabel="negative";
				}
				else{
					tweetLabel="neutral";
				}
				
				java.sql.Date tweetDate = convertJavaDateToSqlDate(tweet.getCreatedAt());
				
				d.addTweets(tweetDate,tweet.getRetweetCount(),tweetPoint,tweetLabel);*/	
				
			}			
			
		}
		 catch (TwitterException e) {
				
				e.printStackTrace();
				System.out.println("Failed to search tweets" + e.getMessage());
				
		 }	
	    
		//d.showTweets();
		logger.info("done! ");
		out.close();
			
	}
	public java.sql.Date convertJavaDateToSqlDate(java.util.Date date) {
	    return new java.sql.Date(date.getTime());
	}
	 
	 
	public static BufferedReader readDataFile(String filename) {
			BufferedReader inputReader = null;
			//InputStreamReader myReader = null;
	 
			try {
				
				inputReader = new BufferedReader(new InputStreamReader(new FileInputStream(filename), "UTF8"));
				//myReader = new InputStreamReader(new FileInputStream(filename),"UTF-8");
				//read data
			} catch (FileNotFoundException ex) {
				System.err.println("File not found: " + filename);
			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	 
			return inputReader;
		}
	 
	public static double ApplyNaiveBayes(Instances data,int k) throws Exception {

		System.out.println("Applying Naive Bayes \n");
		
		int seed=5;
		Random rand = new Random(seed);   // create seeded number generator
		Instances randData = new Instances(data);   // create copy of original data
		randData.randomize(rand);         // randomize data with number generator
		
		
		data.setClassIndex(data.numAttributes() - 1); 
		StringToWordVector swv = new StringToWordVector();
		swv.setInputFormat(data);
		Instances dataFiltered = Filter.useFilter(data, swv);
		//System.out.println("Filtered data " +dataFiltered.toString());
		
		System.out.println("\n\nRaw data:\n\n" + data);
		System.out.println("\n\nFiltered data:\n\n" + dataFiltered);
		
		//set the class index
	    //dataFiltered.setClassIndex(dataFiltered.numAttributes() - 1);
	    //build a model -- choose a classifier as you want
	    NaiveBayes classifier = new NaiveBayes(); 
	    classifier.buildClassifier(dataFiltered);
	    Evaluation eval = new Evaluation(dataFiltered);
	    eval.crossValidateModel(classifier, dataFiltered, k, new Random(1));
	    //print stats -- do not require to calculate confusion mtx, weka do it!
	    System.out.println(classifier);
	    System.out.println(eval.toSummaryString());
	    System.out.println(eval.toMatrixString());
	    System.out.println(eval.toClassDetailsString());
	    //System.out.println("Bu dizi hakkında pozitif tweetlerin oranı:" + "%"+eval.truePositiveRate(0)*100);
	   /* JOptionPane.showMessageDialog(null, "Doğru sınıflandırma yüzdesi" + "%" + String.format("%.2f", eval.pctCorrect()) 
	    + "\nBu dizi hakkında doğru sınıflandırılmış pozitif tweetlerin oranı:" + "%"+ String.format("%.2f", eval.truePositiveRate(0)*100) 
	    + "\nBu dizi hakkında doğru sınıflandırılmış negatif tweetlerin oranı:" + "%" + String.format("%.2f", eval.truePositiveRate(1)*100)
	    + "\nBu dizi hakkında doğru sınıflandırılmış nötr tweetlerin oranı:" + "%" + String.format("%.2f", eval.truePositiveRate(2)*100)); */
		
	  //String cls;
	    int i;
	    
	    double pos=0;
	    double neg=0;
	    double neut=0;
	   /* for(i=0;i<50;i++){
	    cls=dataFiltered.classAttribute().value((int) classifier.classifyInstance(dataFiltered.instance(i)));
	    System.out.println("En son " + cls);
	    } */
	    for ( i = 0; i < dataFiltered.numInstances(); i++) {
	    	   double pred = classifier.classifyInstance(dataFiltered.instance(i));
	    	   System.out.print("ID: " + dataFiltered.instance(i).value(0));
	    	   System.out.print(", actual: " + dataFiltered.classAttribute().value((int) dataFiltered.instance(i).classValue()));
	    	   System.out.println(", predicted: " + dataFiltered.classAttribute().value((int) pred));
	    	   if(dataFiltered.classAttribute().value((int) pred).contains("positive")){
	    		   pos++;
	    	   }
	    	   else if(dataFiltered.classAttribute().value((int) pred).contains("negative")){
	    		   neg++;
	    	   }
	    	   else if(dataFiltered.classAttribute().value((int) pred).contains("neutral")){
	    		   neut++;
	    	   }	 
	    }
	    System.out.println("Bu dizi hakkında pozitif tweetlerin oranı:" + "%" + String.format("%.2f", (pos/dataFiltered.numInstances())*100));
	    System.out.println("Bu dizi hakkında negatif tweetlerin oranı:" + "%" + String.format("%.2f", (neg/dataFiltered.numInstances())*100));
	    System.out.println("Bu dizi hakkında nötr tweetlerin oranı:" + "%" + String.format("%.2f", (neut/dataFiltered.numInstances())*100));

	    JOptionPane.showMessageDialog(null, "Doğru sınıflandırma yüzdesi" + "%" + String.format("%.2f", eval.pctCorrect()) 
	    + "\nBu dizi hakkında pozitif tweetlerin oranı:" + "%"+ String.format("%.2f", (pos/dataFiltered.numInstances())*100) 
	    + "\nBu dizi hakkında negatif tweetlerin oranı:" + "%" + String.format("%.2f", (neg/dataFiltered.numInstances())*100)
	    + "\nBu dizi hakkında nötr tweetlerin oranı:" + "%" + String.format("%.2f", (neut/dataFiltered.numInstances())*100));
		
	    
	    
	    return Double.parseDouble(String.format("%.2f",(pos/dataFiltered.numInstances())*100));
		/*
		Instances[][] split = crossValidationSplit(dataFiltered, k);
		Instances[] trainingSets = split[0];
		Instances[] testingSets = split[1];


		NaiveBayes classifier = new NaiveBayes(); 
		// weka.classifiers.functions.supportVector svm = new weka.classifiers.functions.supportVector.;

		//Cross-validation


		FastVector predictions = new FastVector();
		


		classifier.buildClassifier(dataFiltered);
		System.out.println("\n\nClassifier model:\n\n" + classifier);     

		// Test the model
		for (int i = 0; i < trainingSets.length; i++) {
			classifier.buildClassifier(trainingSets[i]);
			// Test the model         
			Evaluation eTest = new Evaluation(trainingSets[i]);
			eTest.evaluateModel(classifier, testingSets[i]);
			

			// Print the result � la Weka explorer:
			String strSummary = eTest.toSummaryString();
			System.out.println(strSummary);

			// Get the confusion matrix
			double[][] cmMatrix = eTest.confusionMatrix();
			for(int row_i=0; row_i<cmMatrix.length; row_i++){
				for(int col_i=0; col_i<cmMatrix.length; col_i++){
					System.out.print(cmMatrix[row_i][col_i]);
					System.out.print("|");
				}
				System.out.println();
			}
		} */
		
		
	}
	 
	 public static double ApplyKNN(Instances data,int k,int enYakin) throws Exception
	 {
		 System.out.println("Applying K Nearest Neighbor\n");
		 
		 int seed=5;
		 Random rand = new Random(seed);   // create seeded number generator
		 Instances randData = new Instances(data);   // create copy of original data
		 randData.randomize(rand);         // randomize data with number generator
		 
		 data.setClassIndex(data.numAttributes() - 1); 
		 
		 StringToWordVector swv = new StringToWordVector();
         swv.setInputFormat(data);
         Instances dataFiltered = Filter.useFilter(data, swv);
         //System.out.println("Filtered data " +dataFiltered.toString());
         
         System.out.println("\n\nRaw data:\n\n" + data);
         System.out.println("\n\nFiltered data:\n\n" + dataFiltered);
         
         
       //build a model -- choose a classifier as you want
 	    IBk classifier = new IBk(enYakin); 
 	    classifier.buildClassifier(dataFiltered);
 	    Evaluation eval = new Evaluation(dataFiltered);
 	    eval.crossValidateModel(classifier, dataFiltered, k, new Random(1));
 	    //print stats -- do not require to calculate confusion mtx, weka do it!
 	    System.out.println(classifier);
 	    System.out.println(eval.toSummaryString());
 	    System.out.println(eval.toMatrixString());
 	    System.out.println(eval.toClassDetailsString());
 	   // System.out.println("Bu dizi hakkında pozitif tweetlerin oranı:" + "%"+eval.truePositiveRate(0)*100);
 	   /*  JOptionPane.showMessageDialog(null, "Doğru sınıflandırma yüzdesi" + "%" + String.format("%.2f", eval.pctCorrect()) 
 	    + "\nBu dizi hakkında doğru sınıflandırılmış pozitif tweetlerin oranı:" + "%"+ String.format("%.2f", eval.truePositiveRate(0)*100)); */
 	    
 	    //String cls;
	    int i;
	    
	   /* for(i=0;i<50;i++){
	    cls=dataFiltered.classAttribute().value((int) classifier.classifyInstance(dataFiltered.instance(i)));
	    System.out.println("En son " + cls);
	    } */
	    double pos=0;
	    double neut=0;
	    double neg=0;
	    for ( i = 0; i < dataFiltered.numInstances(); i++) {
	    	   double pred = classifier.classifyInstance(dataFiltered.instance(i));
	    	   System.out.print("ID: " + dataFiltered.instance(i).value(0));
	    	   System.out.print(", actual: " + dataFiltered.classAttribute().value((int) dataFiltered.instance(i).classValue()));
	    	   System.out.println(", predicted: " + dataFiltered.classAttribute().value((int) pred));
	    	   if(dataFiltered.classAttribute().value((int) pred).contains("positive")){
	    		   pos++;
	    	   }
	    	   else if(dataFiltered.classAttribute().value((int) pred).contains("negative")){
	    		   neg++;
	    	   }
	    	   else if(dataFiltered.classAttribute().value((int) pred).contains("neutral")){
	    		   neut++;
	    	   }	    	   
	    	 }
	    
	    System.out.println(pos);
	    System.out.println(neg);
	    System.out.println(neut);	    
	    
	    System.out.println(dataFiltered.numInstances());
	    
	    System.out.println("Bu dizi hakkında pozitif tweetlerin oranı:" + "%" + String.format("%.2f", (pos/dataFiltered.numInstances())*100));
	    System.out.println("Bu dizi hakkında negatif tweetlerin oranı:" + "%" + String.format("%.2f", (neg/dataFiltered.numInstances())*100));
	    System.out.println("Bu dizi hakkında nötr tweetlerin oranı:" + "%" + String.format("%.2f", (neut/dataFiltered.numInstances())*100));

	    JOptionPane.showMessageDialog(null, "Doğru sınıflandırma yüzdesi" + "%" + String.format("%.2f", eval.pctCorrect()) 
	    + "\nBu dizi hakkında pozitif tweetlerin oranı:" + "%"+ String.format("%.2f", (pos/dataFiltered.numInstances())*100) 
	    + "\nBu dizi hakkında negatif tweetlerin oranı:" + "%" + String.format("%.2f", (neg/dataFiltered.numInstances())*100)
	    + "\nBu dizi hakkında nötr tweetlerin oranı:" + "%" + String.format("%.2f", (neut/dataFiltered.numInstances())*100));
	    
 	    return Double.parseDouble(String.format("%.2f", (pos/dataFiltered.numInstances())*100));
		 //separating training and test sets 
         
         /*
		 Instances[][] split = crossValidationSplit(dataFiltered, k);
		 Instances[] trainingSets = split[0];
		 Instances[] testingSets = split[1];
		 
		 
         IBk classifier = new IBk(); 
         System.out.println("\n\nClassifier model:" + classifier);     

         for (int i = 0; i < trainingSets.length; i++) {
         classifier.buildClassifier(trainingSets[i]);
         // Test the model         
         Evaluation eTest = new Evaluation(trainingSets[i]);
         eTest.evaluateModel(classifier, testingSets[i]);
         
          // Print the result � la Weka explorer:
          String strSummary = eTest.toSummaryString();
          System.out.println(strSummary);
           
          // Get the confusion matrix
          double[][] cmMatrix = eTest.confusionMatrix();
          for(int row_i=0; row_i<cmMatrix.length; row_i++){
              for(int col_i=0; col_i<cmMatrix.length; col_i++){
                  System.out.print(cmMatrix[row_i][col_i]);
                  System.out.print("|");
              }
              System.out.println();
          }
          
          System.out.println(eTest.toClassDetailsString());
         } */
	 }
	 
	 /*
	 public static void ApplySVM(Instances data,int k) throws Exception
	 {
		 System.out.println("Applying Support Vector Machines");
		 data.setClassIndex(data.numAttributes() - 1);

		 StringToWordVector swv = new StringToWordVector();
		 swv.setInputFormat(data);
		 Instances dataFiltered = Filter.useFilter(data, swv);
		 //System.out.println("Filtered data " +dataFiltered.toString());

		 System.out.println("\n\nFiltered data:\n\n" + dataFiltered);

		 //separating training and test sets 
		 Instances[][] split = crossValidationSplit(dataFiltered, k);
		 Instances[] trainingSets = split[0];
		 Instances[] testingSets = split[1];
		 
		 
		 //initialize svm classifier
		 LibSVM classifier = new LibSVM();
		 

		 classifier.buildClassifier(dataFiltered);
		 System.out.println("\n\nClassifier model:\n\n" + classifier);    

		 for (int i = 0; i < trainingSets.length; i++) {
	         classifier.buildClassifier(trainingSets[i]);
	         // Test the model         
	         Evaluation eTest = new Evaluation(trainingSets[i]);
	         eTest.evaluateModel(classifier, testingSets[i]);
	         
	          // Print the result � la Weka explorer:
	          String strSummary = eTest.toSummaryString();
	          System.out.println(strSummary);
	           
	          // Get the confusion matrix
	          double[][] cmMatrix = eTest.confusionMatrix();
	          for(int row_i=0; row_i<cmMatrix.length; row_i++){
	              for(int col_i=0; col_i<cmMatrix.length; col_i++){
	                  System.out.print(cmMatrix[row_i][col_i]);
	                  System.out.print("|");
	              }
	              System.out.println();
	          }
	         }
	 } */
	 
	 
	 public static double ApplyJ48(Instances data,int k) throws Exception
	 {
		 System.out.println("Applying C 4.5 Decision Tree");
		 String[] options = new String[1]; 
		 options[0] = "weka.classifiers.trees.j48" + "-C 0.25 -M 2";  
		 
		 int seed=5;
		 Random rand = new Random(seed);   // create seeded number generator
		 Instances randData = new Instances(data);   // create copy of original data
		 randData.randomize(rand);         // randomize data with number generator
		 data.setClassIndex(data.numAttributes() - 1);

		 StringToWordVector swv = new StringToWordVector();
		 swv.setInputFormat(data);
		 Instances dataFiltered = Filter.useFilter(data, swv);
		 //System.out.println("Filtered data " +dataFiltered.toString());
		 
		 System.out.println("\n\nRaw data:\n\n" + data);
		 System.out.println("\n\nFiltered data:\n\n" + dataFiltered);
		 
		//build a model -- choose a classifier as you want
		    J48 classifier = new J48(); 
		    classifier.setOptions(options);
		    classifier.buildClassifier(dataFiltered);
		    Evaluation eval = new Evaluation(dataFiltered);
		    eval.crossValidateModel(classifier, dataFiltered, k, new Random(1));
		    
		    //print stats -- do not require to calculate confusion mtx, weka do it!
		    System.out.println(classifier);
		    System.out.println(eval.toSummaryString());
		    System.out.println(eval.toMatrixString());
		    System.out.println(eval.toClassDetailsString());
		    System.out.println("Bu dizi hakkında pozitif tweetlerin oranı:" + "%"+eval.truePositiveRate(0)*100);
		    /*JOptionPane.showMessageDialog(null, "Doğru sınıflandırma yüzdesi" + "%" + String.format("%.2f", eval.pctCorrect()) 
		    + "\nBu dizi hakkında doğru sınıflandırılmış pozitif tweetlerin oranı:" + "%"+ String.format("%.2f", eval.truePositiveRate(0)*100));*/
		    
		    int i;
		    //String cls;
		    double pos=0;
		    double neg=0;
		    double neut=0;
		   /* for(i=0;i<50;i++){
		    cls=dataFiltered.classAttribute().value((int) classifier.classifyInstance(dataFiltered.instance(i)));
		    System.out.println("En son " + cls);
		    } */
		    for ( i = 0; i < dataFiltered.numInstances(); i++) {
		    	   double pred = classifier.classifyInstance(dataFiltered.instance(i));
		    	   System.out.print("ID: " + dataFiltered.instance(i).value(0));
		    	   System.out.print(", actual: " + dataFiltered.classAttribute().value((int) dataFiltered.instance(i).classValue()));
		    	   System.out.println(", predicted: " + dataFiltered.classAttribute().value((int) pred));
		    	   if(dataFiltered.classAttribute().value((int) pred).contains("positive")){
		    		   pos++;
		    	   }
		    	   else if(dataFiltered.classAttribute().value((int) pred).contains("negative")){
		    		   neg++;
		    	   }
		    	   else if(dataFiltered.classAttribute().value((int) pred).contains("neutral")){
		    		   neut++;
		    	   }	 
		    	 }
		    
		    
		    
		    System.out.println("Bu dizi hakkında pozitif tweetlerin oranı:" + "%" + String.format("%.2f", (pos/dataFiltered.numInstances())*100));
		    System.out.println("Bu dizi hakkında negatif tweetlerin oranı:" + "%" + String.format("%.2f", (neg/dataFiltered.numInstances())*100));
		    System.out.println("Bu dizi hakkında nötr tweetlerin oranı:" + "%" + String.format("%.2f", (neut/dataFiltered.numInstances())*100));

		    JOptionPane.showMessageDialog(null, "Doğru sınıflandırma yüzdesi" + "%" + String.format("%.2f", eval.pctCorrect()) 
		    + "\nBu dizi hakkında pozitif tweetlerin oranı:" + "%"+ String.format("%.2f", (pos/dataFiltered.numInstances())*100) 
		    + "\nBu dizi hakkında negatif tweetlerin oranı:" + "%" + String.format("%.2f", (neg/dataFiltered.numInstances())*100)
		    + "\nBu dizi hakkında nötr tweetlerin oranı:" + "%" + String.format("%.2f", (neut/dataFiltered.numInstances())*100));
			
		    
		    
		    return Double.parseDouble(String.format("%.2f",(pos/dataFiltered.numInstances())*100));
		 
		 /*
		 //separating training and test sets 
		 Instances[][] split = crossValidationSplit(dataFiltered, k);
		 Instances[] trainingSets = split[0];
		 Instances[] testingSets = split[1];
		 
		 
		 //initialize svm classifier
		 J48 classifier = new J48();
		 

		 classifier.buildClassifier(dataFiltered);
		 System.out.println("\n\nClassifier model:\n\n" + classifier);    

		 for (int i = 0; i < trainingSets.length; i++) {
	         classifier.buildClassifier(trainingSets[i]);
	         // Test the model         
	         Evaluation eTest = new Evaluation(trainingSets[i]);
	         eTest.evaluateModel(classifier, testingSets[i]);
	         
	          // Print the result � la Weka explorer:
	          String strSummary = eTest.toSummaryString();
	          System.out.println(strSummary);
	          
	           
	          // Get the confusion matrix
	          double[][] cmMatrix = eTest.confusionMatrix();
	          for(int row_i=0; row_i<cmMatrix.length; row_i++){
	              for(int col_i=0; col_i<cmMatrix.length; col_i++){
	                  System.out.print(cmMatrix[row_i][col_i]);
	                  System.out.print("|");
	              }
	              System.out.println();
	          }
	         }*/
	 }
	 
	 
	 public static Instances[][] crossValidationSplit(Instances data, int numberOfFolds) {
		    Instances[][] split = new Instances[2][numberOfFolds];

		    for (int i = 0; i < numberOfFolds; i++) {
		        split[0][i] = data.trainCV(numberOfFolds, i);
		        split[1][i] = data.testCV(numberOfFolds, i);
		    }

		    return split;
		}
	 
	 
	 TurkishMorphParser parser;
	 

	 public String parse(String word) {
		 System.out.println("Word = " + word);
		 List<MorphParse> parses = parser.parse(word);
		 for (MorphParse parse : parses) {
			 System.out.println(parse.root);
		 }
		 return word;
	 }
	 
	 public static void drawPieChart(){
		 ArrayList<Double> values = new ArrayList<Double>();
		 values.add(new Double(10));
		 values.add(new Double(20));
		 values.add(new Double(30));
		 values.add(new Double(15));
		 values.add(new Double(15));
		  
		 ArrayList<Color> colors = new ArrayList<Color>();
		 colors.add(Color.gray);
		 colors.add(Color.green);
		 colors.add(Color.blue);
		 colors.add(Color.pink);
		 colors.add(Color.yellow);
		// PieChart pieChart = new PieChart(values, colors);
		// myPanel.add(pieChart);
		 
		 
	 } 	 
		 
	 }


	



